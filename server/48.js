"use strict";var __defProp=Object.defineProperty,__name=(target,value)=>__defProp(target,"name",{value,configurable:!0});exports.id=48,exports.ids=[48],exports.modules={88048:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AudioPageModule:()=>AudioPageModule});var core=__webpack_require__(74788),audio_context=__webpack_require__(30190),taiga_ui_core_components_button=__webpack_require__(12628),taiga_ui_core_components_label=__webpack_require__(19506),taiga_ui_core_directives_textfield_controller=__webpack_require__(441),taiga_ui_core_components_data_list=__webpack_require__(75111),taiga_ui_kit_components_radio_labeled=__webpack_require__(2727),taiga_ui_kit_components_slider=__webpack_require__(18106),taiga_ui_kit_components_select=__webpack_require__(99485),taiga_ui_kit_components_data_list_wrapper=__webpack_require__(4246),common=__webpack_require__(12057),fesm2015_forms=__webpack_require__(24751),buffer_source=__webpack_require__(40601),analyser=__webpack_require__(12343),output=__webpack_require__(20047),media_source=__webpack_require__(1896),oscillator=__webpack_require__(45772),canvas_2d=__webpack_require__(26134),destination=__webpack_require__(54295),fill_stroke_styles=__webpack_require__(80454),path_drawing_styles=__webpack_require__(55590),transform=__webpack_require__(69806),path_2d=__webpack_require__(69641),gain=__webpack_require__(33555),stereo_panner=__webpack_require__(19935),delay=__webpack_require__(15836),biquad_filter=__webpack_require__(44058),wave_shaper=__webpack_require__(4664),convolver=__webpack_require__(16667),periodic_wave_pipe=__webpack_require__(17634),transform_pipe=__webpack_require__(47489),path_pipe=__webpack_require__(44772),audio_param_pipe=__webpack_require__(6029);class AudioPageComponent{constructor(context){this.context=context,this.buffers=[Date.now()],this.selectedChain="dry",this.selectedSource="buffer",this.gain=1,this.pan=0,this.delayTime=1,this.delayGain=.5,this.distortion=20,this.frequency=350,this.detune=0,this.filterGain=0,this.Q=1,this.type="lowpass",this.curve=makeDistortionCurve(this.distortion),this.started=!1,this.fftSize=2048,this.path="",this.items=["lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass"],this.real=[0,0,1,0,1]}get distortionCompensation(){return 1.2-this.distortion/20}start(){this.started=!0,this.context.resume()}getTransform({width,height}){return`scale(${width/this.fftSize}, ${height/2})`}onCurveChange(distortion){this.distortion=distortion,this.curve=makeDistortionCurve(distortion)}onClick(source,button){"Play"===button.textContent.trim()?(button.textContent="Stop",source.start()):this.buffers[0]=Date.now()}onTimeDomain(array){this.path=array.reduce((path,value,index)=>`${path} L ${index} ${value/128}`,"M 0 0")}}function makeDistortionCurve(amount){const curve=new Float32Array(44100),deg=Math.PI/180;for(let i=0;i<44100;++i){const x=2*i/44100-1;curve[i]=(3+amount)*x*20*deg/(Math.PI+amount*Math.abs(x))}return curve}__name(AudioPageComponent,"AudioPageComponent"),AudioPageComponent.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.17",ngImport:core,type:AudioPageComponent,deps:[{token:audio_context.N}],target:core.\u0275\u0275FactoryTarget.Component}),AudioPageComponent.\u0275cmp=core.\u0275\u0275ngDeclareComponent({minVersion:"12.0.0",version:"12.2.17",type:AudioPageComponent,selector:"audio-page",viewQueries:[{propertyName:"chain",first:!0,predicate:["chain"],descendants:!0}],ngImport:core,template:'<button\n    *ngIf="!started; else graph"\n    tuiButton\n    appearance="secondary"\n    (click)="start()"\n>\n    Start AudioContext\n</button>\n<ng-template #graph>\n    <section>\n        <h1>Description</h1>\n        <p>\n            This is a demo for\n            <strong>@ng-web-apis/audio</strong>\n            \u2014 a Web Audio API declarative library for Angular. Here you can\n            select different audio source options and see AudioNode graph for\n            selected configuration. Demo page uses HTML elements as directives\n            hosts, in real life scenario you can use\n            <code>ng-container</code>\n            so you will not have redundant DOM tags.\n        </p>\n    </section>\n    <section>\n        <h1>Source</h1>\n\n        <tui-radio-labeled\n            item="buffer"\n            name="source"\n            [(ngModel)]="selectedSource"\n        >\n            AudioBufferSourceNode\n        </tui-radio-labeled>\n        <tui-radio-labeled\n            item="media"\n            name="source"\n            [(ngModel)]="selectedSource"\n        >\n            MediaElementAudioSourceNode\n        </tui-radio-labeled>\n        <tui-radio-labeled\n            item="oscillator"\n            name="source"\n            [(ngModel)]="selectedSource"\n        >\n            OscillatorNode\n        </tui-radio-labeled>\n\n        <ng-container [ngSwitch]="selectedSource">\n            <ng-container *ngSwitchCase="\'buffer\'">\n                <button\n                    *ngFor="let _ of buffers"\n                    #source="AudioNode"\n                    waAudioBufferSourceNode\n                    tuiButton\n                    size="s"\n                    buffer="assets/demo.mp3"\n                    [loop]="true"\n                    (click)="onClick(source, $any($event).target)"\n                >\n                    Play\n                    <ng-container\n                        waAnalyserNode\n                        [fftSize]="fftSize"\n                        (timeByte$)="onTimeDomain($event)"\n                    >\n                        <ng-container\n                            [waOutput]="chain || fallback"\n                        ></ng-container>\n                    </ng-container>\n                </button>\n            </ng-container>\n            <audio\n                *ngSwitchCase="\'media\'"\n                waMediaElementAudioSourceNode\n                src="assets/demo.mp3"\n                loop\n                controls\n            >\n                <ng-container\n                    waAnalyserNode\n                    [fftSize]="fftSize"\n                    (timeByte$)="onTimeDomain($event)"\n                >\n                    <ng-container [waOutput]="chain || fallback"></ng-container>\n                </ng-container>\n            </audio>\n            <ng-container *ngSwitchCase="\'oscillator\'">\n                <button\n                    *ngFor="let _ of buffers"\n                    #source="AudioNode"\n                    waOscillatorNode\n                    tuiButton\n                    size="s"\n                    [frequency]="100"\n                    [periodicWave]="real | waPeriodicWave"\n                    (click)="onClick(source, $any($event).target)"\n                >\n                    Play\n                    <ng-container\n                        waAnalyserNode\n                        [fftSize]="fftSize"\n                        (timeByte$)="onTimeDomain($event)"\n                    >\n                        <ng-container\n                            [waOutput]="chain || fallback"\n                        ></ng-container>\n                    </ng-container>\n                </button>\n            </ng-container>\n        </ng-container>\n\n        <p>\n            <canvas\n                #canvas\n                #fallback="AudioNode"\n                waAudioDestinationNode\n                waCanvas2d\n                class="canvas"\n            >\n                <canvas-path\n                    fillStyle="transparent"\n                    strokeStyle="black"\n                    [lineWidth]="4 / canvas.height"\n                    [transform]="getTransform(canvas) | transform"\n                    [path]="path | path"\n                ></canvas-path>\n            </canvas>\n        </p>\n    </section>\n\n    <section>\n        <h1>Chain</h1>\n\n        <tui-radio-labeled item="dry" name="chain" [(ngModel)]="selectedChain">\n            Dry\n        </tui-radio-labeled>\n        <tui-radio-labeled\n            item="balance"\n            name="chain"\n            [(ngModel)]="selectedChain"\n        >\n            Balance\n        </tui-radio-labeled>\n        <tui-radio-labeled\n            item="delay"\n            name="chain"\n            [(ngModel)]="selectedChain"\n        >\n            Delay\n        </tui-radio-labeled>\n        <tui-radio-labeled\n            item="complex"\n            name="chain"\n            [(ngModel)]="selectedChain"\n        >\n            Complex\n        </tui-radio-labeled>\n\n        <ng-container [ngSwitch]="selectedChain">\n            <ng-container *ngSwitchCase="\'balance\'">\n                <fieldset\n                    #chain="AudioNode"\n                    waGainNode\n                    [gain]="gain | waAudioParam: 0.1"\n                >\n                    <legend>GainNode</legend>\n                    <input\n                        tuiSlider\n                        type="range"\n                        min="0"\n                        max="1"\n                        step="0.01"\n                        [(ngModel)]="gain"\n                    />\n                    <fieldset\n                        waStereoPannerNode\n                        [pan]="pan | waAudioParam: 0.1"\n                    >\n                        <legend>StereoPannerNode</legend>\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="-1"\n                            max="1"\n                            step="0.01"\n                            [(ngModel)]="pan"\n                        />\n                        <fieldset waAudioDestinationNode>\n                            <legend>AudioDestinationNode</legend>\n                        </fieldset>\n                    </fieldset>\n                </fieldset>\n            </ng-container>\n\n            <ng-container *ngSwitchCase="\'delay\'">\n                <fieldset\n                    #chain="AudioNode"\n                    waGainNode\n                    [gain]="gain | waAudioParam: 0.1"\n                >\n                    <legend>GainNode</legend>\n                    <em>For feedback loop purposes only</em>\n\n                    <fieldset\n                        waDelayNode\n                        [delayTime]="delayTime | waAudioParam: 0.1"\n                    >\n                        <legend>DelayNode</legend>\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="0"\n                            max="1"\n                            step="0.01"\n                            [(ngModel)]="delayTime"\n                        />\n                        <fieldset waGainNode [gain]="delayGain">\n                            <legend>GainNode</legend>\n                            <input\n                                tuiSlider\n                                type="range"\n                                min="0"\n                                max="1"\n                                step="0.01"\n                                [(ngModel)]="delayGain"\n                            />\n                            <fieldset [waOutput]="chain">\n                                <legend>Output</legend>\n                                <em>\n                                    Connected back to the beginning of the chain\n                                </em>\n                            </fieldset>\n                        </fieldset>\n                    </fieldset>\n                    <fieldset waAudioDestinationNode>\n                        <legend>AudioDestinationNode</legend>\n                    </fieldset>\n                </fieldset>\n            </ng-container>\n\n            <ng-container *ngSwitchCase="\'complex\'">\n                <fieldset\n                    #chain="AudioNode"\n                    waBiquadFilterNode\n                    [type]="type"\n                    [gain]="filterGain | waAudioParam: 0.1"\n                    [frequency]="frequency | waAudioParam: 0.1"\n                    [Q]="Q | waAudioParam: 0.1"\n                    [detune]="detune | waAudioParam: 0.1"\n                >\n                    <legend>BiquadFilterNode</legend>\n                    <tui-select tuiTextfieldSize="m" [(ngModel)]="type">\n                        Type\n                        <tui-data-list-wrapper\n                            *tuiDataList\n                            [items]="items"\n                        ></tui-data-list-wrapper>\n                    </tui-select>\n                    <label tuiLabel="gain">\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="0"\n                            max="1"\n                            step="0.01"\n                            [(ngModel)]="filterGain"\n                        />\n                    </label>\n                    <label tuiLabel="frequence">\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="20"\n                            max="5000"\n                            [(ngModel)]="frequency"\n                        />\n                    </label>\n                    <label tuiLabel="Q">\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="1"\n                            max="100"\n                            [(ngModel)]="Q"\n                        />\n                    </label>\n                    <label tuiLabel="detune">\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="0"\n                            max="100"\n                            [(ngModel)]="detune"\n                        />\n                    </label>\n                    <fieldset waWaveShaperNode oversample="4x" [curve]="curve">\n                        <legend>WaveShaperNode</legend>\n                        <input\n                            tuiSlider\n                            type="range"\n                            min="0"\n                            max="20"\n                            step="0.1"\n                            [ngModel]="distortion"\n                            (ngModelChange)="onCurveChange($event)"\n                        />\n                        <ng-container\n                            waGainNode\n                            [gain]="distortionCompensation | waAudioParam: 0.1"\n                        >\n                            <fieldset\n                                waConvolverNode\n                                buffer="assets/response.m4a"\n                            >\n                                <legend>ConvolverNode</legend>\n                                <fieldset waAudioDestinationNode>\n                                    <legend>AudioDestinationNode</legend>\n                                </fieldset>\n                            </fieldset>\n                        </ng-container>\n                    </fieldset>\n                </fieldset>\n            </ng-container>\n        </ng-container>\n    </section>\n</ng-template>\n',styles:[":host{display:flex;justify-content:center;grid-gap:12px;gap:12px}@media (max-width: 1100px){:host{flex-direction:column;width:320px;margin:0 auto}}tui-radio-labeled{margin:1rem 0}section{flex:1;max-width:320px;padding:1px 10px 10px;box-sizing:border-box;background:whitesmoke;border-radius:8px}audio{margin-top:1em}label{margin-top:.5rem}input{margin:0}fieldset{margin-top:1em;border:none;border-radius:4px}legend{background:white;box-shadow:0 0 2px;padding:5px 10px;border-radius:2px}*[ng-reflect--waoutput]{background:thistle}*[waGainNode]{background:pink}*[waDelayNode]{background:lightgreen}*[waStereoPannerNode]{background:skyblue}*[waAudioDestinationNode]{background:khaki}*[waWaveShaperNode]{background:salmon}*[waBiquadFilterNode]{background:gold}*[waConvolverNode]{background:aquamarine}\n"],components:[{type:taiga_ui_core_components_button.v0,selector:"button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]",inputs:["appearance","disabled","icon","iconRight","shape","showLoader","size"]},{type:taiga_ui_kit_components_radio_labeled.Y,selector:"tui-radio-labeled",inputs:["item","size","identityMatcher","pseudoDisabled"]},{type:taiga_ui_kit_components_slider.iN,selector:"input[type=range][tuiSlider]",inputs:["size","segments"]},{type:taiga_ui_kit_components_select.uJ,selector:"tui-select",inputs:["stringify","identityMatcher","valueContent"]},{type:taiga_ui_kit_components_data_list_wrapper.eC,selector:"tui-data-list-wrapper:not([labels])",inputs:["items"]},{type:taiga_ui_core_components_label.A,selector:"label[tuiLabel]",inputs:["tuiLabel","context"]}],directives:[{type:common.O5,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{type:fesm2015_forms.JJ,selector:"[formControlName],[ngModel],[formControl]"},{type:fesm2015_forms.On,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{type:common.RF,selector:"[ngSwitch]",inputs:["ngSwitch"]},{type:common.n9,selector:"[ngSwitchCase]",inputs:["ngSwitchCase"]},{type:common.sg,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{type:buffer_source.v,selector:"[waAudioBufferSourceNode]",inputs:["loop","loopStart","loopEnd","channelCount","channelCountMode","channelInterpretation","buffer","detune","playbackRate"],outputs:["ended"],exportAs:["AudioNode"]},{type:analyser.A,selector:"[waAnalyserNode]",inputs:["fftSize","minDecibels","maxDecibels","smoothingTimeConstant","channelCount","channelCountMode","channelInterpretation"],outputs:["frequencyByte$","frequencyFloat$","timeByte$","timeFloat$"],exportAs:["AudioNode"]},{type:output.g,selector:"[waOutput]",inputs:["waOutput"]},{type:media_source.X,selector:"audio[waMediaElementAudioSourceNode], video[waMediaElementAudioSourceNode]",exportAs:["AudioNode"]},{type:oscillator.P,selector:"[waOscillatorNode]",inputs:["type","channelCount","channelCountMode","channelInterpretation","periodicWave","detune","frequency"],outputs:["ended"],exportAs:["AudioNode"]},{type:canvas_2d.C,selector:"canvas[waCanvas2d]"},{type:destination.i,selector:"[waAudioDestinationNode]",outputs:["quiet"],exportAs:["AudioNode"]},{type:fill_stroke_styles.l,selector:"canvas-path[fillStyle],canvas-path[strokeStyle],canvas-text[fillStyle],canvas-text[strokeStyle]",inputs:["fillStyle","strokeStyle"]},{type:path_drawing_styles.I,selector:"canvas-path[lineCap],canvas-path[lineDashOffset],canvas-path[lineJoin],canvas-path[lineWidth],canvas-path[lineDash],canvas-path[miterLimit],canvas-text[lineCap],canvas-text[lineDashOffset],canvas-text[lineJoin],canvas-text[lineWidth],canvas-text[lineDash],canvas-text[miterLimit]",inputs:["lineCap","lineDashOffset","lineJoin","lineWidth","lineDash","miterLimit"]},{type:transform.g,selector:"canvas[transform],canvas-draw-image[transform],canvas-path[transform],canvas-text[transform]",inputs:["transform"]},{type:path_2d.$,selector:"canvas-path[path]",inputs:["path","fillRule"]},{type:gain.z,selector:"[waGainNode]",inputs:["channelCount","channelCountMode","channelInterpretation","gain"],exportAs:["AudioNode"]},{type:fesm2015_forms.eT,selector:"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]"},{type:fesm2015_forms.Fj,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{type:stereo_panner.o,selector:"[waStereoPannerNode]",inputs:["channelCount","channelCountMode","channelInterpretation","pan"],exportAs:["AudioNode"]},{type:delay.A,selector:"[waDelayNode]",inputs:["channelCount","channelCountMode","channelInterpretation","delayTime"],exportAs:["AudioNode"]},{type:biquad_filter.e,selector:"[waBiquadFilterNode]",inputs:["type","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","Q"],exportAs:["AudioNode"]},{type:taiga_ui_kit_components_select.OI,selector:"tui-select"},{type:taiga_ui_core_directives_textfield_controller.sz,selector:"[tuiTextfieldSize]",inputs:["tuiTextfieldSize"]},{type:taiga_ui_core_components_data_list.gX,selector:"ng-template[tuiDataList]"},{type:wave_shaper.q,selector:"[waWaveShaperNode]",inputs:["oversample","curve","channelCount","channelCountMode","channelInterpretation"],exportAs:["AudioNode"]},{type:convolver.g,selector:"[waConvolverNode]",inputs:["normalize","channelCount","channelCountMode","channelInterpretation","buffer"],exportAs:["AudioNode"]}],pipes:{waPeriodicWave:periodic_wave_pipe.Y,transform:transform_pipe.a,path:path_pipe.Y,waAudioParam:audio_param_pipe.v},changeDetection:core.ChangeDetectionStrategy.OnPush}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.17",ngImport:core,type:AudioPageComponent,decorators:[{type:core.Component,args:[{selector:"audio-page",templateUrl:"./audio-page.component.html",styleUrls:["./audio-page.component.css"],changeDetection:core.ChangeDetectionStrategy.OnPush}]}],ctorParameters:function(){return[{type:AudioContext,decorators:[{type:core.Inject,args:[audio_context.N]}]}]},propDecorators:{chain:[{type:core.ViewChild,args:["chain"]}]}}),__name(makeDistortionCurve,"makeDistortionCurve");var router=__webpack_require__(3984),src_module=__webpack_require__(87280),src=__webpack_require__(8871);class AudioPageModule{}__name(AudioPageModule,"AudioPageModule"),AudioPageModule.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.17",ngImport:core,type:AudioPageModule,deps:[],target:core.\u0275\u0275FactoryTarget.NgModule}),AudioPageModule.\u0275mod=core.\u0275\u0275ngDeclareNgModule({minVersion:"12.0.0",version:"12.2.17",ngImport:core,type:AudioPageModule,declarations:[AudioPageComponent],imports:[common.ez,fesm2015_forms.u5,src_module.O,router.Bz,taiga_ui_kit_components_radio_labeled._,src.tZ,taiga_ui_core_components_button.fN,taiga_ui_kit_components_slider.c2,taiga_ui_core_components_label.U,taiga_ui_kit_components_select.Jy,taiga_ui_core_directives_textfield_controller.cn,taiga_ui_kit_components_data_list_wrapper.zX]}),AudioPageModule.\u0275inj=core.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"12.2.17",ngImport:core,type:AudioPageModule,imports:[[common.ez,fesm2015_forms.u5,src_module.O,router.Bz.forChild([{path:"",component:AudioPageComponent}]),taiga_ui_kit_components_radio_labeled._,src.tZ,taiga_ui_core_components_button.fN,taiga_ui_kit_components_slider.c2,taiga_ui_core_components_label.U,taiga_ui_kit_components_select.Jy,taiga_ui_core_directives_textfield_controller.cn,taiga_ui_kit_components_data_list_wrapper.zX]]}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.17",ngImport:core,type:AudioPageModule,decorators:[{type:core.NgModule,args:[{imports:[common.ez,fesm2015_forms.u5,src_module.O,router.Bz.forChild([{path:"",component:AudioPageComponent}]),taiga_ui_kit_components_radio_labeled._,src.tZ,taiga_ui_core_components_button.fN,taiga_ui_kit_components_slider.c2,taiga_ui_core_components_label.U,taiga_ui_kit_components_select.Jy,taiga_ui_core_directives_textfield_controller.cn,taiga_ui_kit_components_data_list_wrapper.zX],declarations:[AudioPageComponent]}]}]})}};