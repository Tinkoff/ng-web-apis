"use strict";var __defProp=Object.defineProperty,__name=(target,value)=>__defProp(target,"name",{value,configurable:!0});exports.id=705,exports.ids=[705],exports.modules={71705:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AudioPageModule:()=>AudioPageModule});var core=__webpack_require__(74788);const AUDIO_CONTEXT=new core.InjectionToken("Web Audio API context",{providedIn:"root",factory:()=>new AudioContext});var common=__webpack_require__(12057),fesm2015_forms=__webpack_require__(24751),tslib_es6=__webpack_require__(64762),cjs=__webpack_require__(72921),operators=__webpack_require__(57192);function processAudioParam(param,value,currentTime=0){param.cancelAndHoldAtTime?param.cancelAndHoldAtTime(currentTime):(param.cancelScheduledValues(currentTime),param.setValueAtTime(guard(param.value),currentTime)),"number"!=typeof value?value instanceof Array?processSchedule(param,value,currentTime):"mode"in value?(param.setValueAtTime(guard(param.value),currentTime),processAutomation(param,value,currentTime)):param.setValueCurveAtTime(value.value,currentTime,value.duration):param.setValueAtTime(guard(value),currentTime)}function processSchedule(param,value,currentTime){value.forEach(automation=>{"mode"in automation?processAutomation(param,automation,currentTime):param.setValueCurveAtTime(automation.value,currentTime,automation.duration),currentTime+=automation.duration})}function processAutomation(param,{value,mode="instant",duration},currentTime){switch(mode){case"instant":param.setValueAtTime(guard(value),currentTime),param.setValueAtTime(guard(value),currentTime+duration);break;case"exponential":value<0||value*param.value<0?param.linearRampToValueAtTime(guard(value),currentTime+duration):param.exponentialRampToValueAtTime(guard(value),currentTime+duration),param.setValueAtTime(guard(value),currentTime+duration);break;case"linear":param.linearRampToValueAtTime(guard(value),currentTime+duration)}}function guard(v){return v||1e-8}function audioParam(param=""){return __name((target,propertyKey)=>{Object.defineProperty(target,propertyKey,{set(value){value="string"==typeof value?Number.parseFloat(value):value;const audioParam2=this instanceof AudioWorkletNode?this.parameters.get(propertyKey):this[param];audioParam2 instanceof AudioParam?processAudioParam(audioParam2,value,this.context.currentTime):Object.defineProperty(target,propertyKey,{value})}})},"decorator")}__name(processAudioParam,"processAudioParam"),__name(processSchedule,"processSchedule"),__name(processAutomation,"processAutomation"),__name(guard,"guard"),__name(audioParam,"audioParam");class AudioBufferService{constructor(context){this.context=context,this.cache=new Map}fetch(url){return new Promise((resolve,reject)=>{if(this.cache.has(url))return void resolve(this.cache.get(url));const request=new XMLHttpRequest;request.open("GET",url,!0),request.responseType="arraybuffer",request.onerror=reject,request.onabort=reject,request.onload=()=>{this.context.decodeAudioData(request.response,buffer=>{this.cache.set(url,buffer),resolve(buffer)},reject)},request.send()})}}__name(AudioBufferService,"AudioBufferService"),AudioBufferService.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioBufferService,deps:[{token:AUDIO_CONTEXT}],target:core.\u0275\u0275FactoryTarget.Injectable}),AudioBufferService.\u0275prov=core.\u0275\u0275ngDeclareInjectable({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioBufferService,providedIn:"root"}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioBufferService,decorators:[{type:core.Injectable,args:[{providedIn:"root"}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]}]}});const AUDIO_NODE=new core.InjectionToken("Web Audio API audio node",{factory:()=>null}),CONSTRUCTOR_SUPPORT=new core.InjectionToken("Tests if constructor mode of node creation is supported or a fallback to factory method is needed",{providedIn:"root",factory:()=>{try{return!!new GainNode((0,core.inject)(AUDIO_CONTEXT))}catch(_){return!1}}});function parse(value,fallback){const parsed=parseFloat(value||"");return isNaN(parsed)?fallback:parsed}__name(parse,"parse");class WebAudioBufferSource extends AudioBufferSourceNode{constructor(audioBufferService,context,modern,autoplay,detuneArg,playbackRateArg){const detune=parse(detuneArg,0),playbackRate=parse(playbackRateArg,1);if(!modern){const result=context.createBufferSource();return Object.setPrototypeOf(WebAudioBufferSource.prototype,Object.getPrototypeOf(result)),Object.setPrototypeOf(result,WebAudioBufferSource.prototype),result.playbackRate.value=playbackRate,WebAudioBufferSource.init(result,null,autoplay,audioBufferService),result}super(context,{detune,playbackRate}),WebAudioBufferSource.init(this,null,autoplay,audioBufferService)}set bufferSetter(source){this.buffer$.next(source)}ngOnDestroy(){this.buffer$.complete();try{this.stop()}catch(_a){}this.disconnect()}static init(that,_node,autoplay,audioBufferService){null!==autoplay&&that.start();const ended=new core.EventEmitter;that.ended=ended,that.onended=()=>ended.emit(),that.buffer$=new cjs.Subject,that.buffer$.pipe((0,operators.wt)(source=>"string"==typeof source?audioBufferService.fetch(source):(0,cjs.of)(source))).subscribe(buffer=>{that.buffer=buffer})}}function connect(source,destination){source&&destination&&source.connect(destination)}__name(WebAudioBufferSource,"WebAudioBufferSource"),WebAudioBufferSource.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioBufferSource,deps:[{token:AudioBufferService},{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT},{token:"autoplay",attribute:!0},{token:"detune",attribute:!0},{token:"playbackRate",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioBufferSource.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioBufferSource,selector:"[waAudioBufferSourceNode]",inputs:{loop:"loop",loopStart:"loopStart",loopEnd:"loopEnd",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",bufferSetter:["buffer","bufferSetter"],detuneParam:["detune","detuneParam"],playbackRateParam:["playbackRate","playbackRateParam"]},outputs:{ended:"ended"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioBufferSource)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("detune")],WebAudioBufferSource.prototype,"detuneParam",void 0),(0,tslib_es6.gn)([audioParam("playbackRate")],WebAudioBufferSource.prototype,"playbackRateParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioBufferSource,decorators:[{type:core.Directive,args:[{selector:"[waAudioBufferSourceNode]",exportAs:"AudioNode",inputs:["loop","loopStart","loopEnd","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioBufferSource)}]}]}],ctorParameters:function(){return[{type:AudioBufferService,decorators:[{type:core.Inject,args:[AudioBufferService]}]},{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["autoplay"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["detune"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["playbackRate"]}]}]},propDecorators:{bufferSetter:[{type:core.Input,args:["buffer"]}],detuneParam:[{type:core.Input,args:["detune"]}],playbackRateParam:[{type:core.Input,args:["playbackRate"]}],ended:[{type:core.Output}]}}),__name(connect,"connect");class WebAudioAnalyser extends AnalyserNode{constructor(context,node,modern,fftSizeArg,maxDecibelsArg,minDecibelsArg,smoothingTimeConstantArg){const fftSize=parse(fftSizeArg,2048),maxDecibels=parse(maxDecibelsArg,-30),minDecibels=parse(minDecibelsArg,-100),smoothingTimeConstant=parse(smoothingTimeConstantArg,.8);if(!modern){const result=context.createAnalyser();return Object.setPrototypeOf(result,WebAudioAnalyser.prototype),WebAudioAnalyser.init(result,node),result.fftSize=fftSize,result.maxDecibels=maxDecibels,result.minDecibels=minDecibels,result.smoothingTimeConstant=smoothingTimeConstant,result}super(context,{fftSize,maxDecibels,minDecibels,smoothingTimeConstant}),WebAudioAnalyser.init(this,node)}ngOnDestroy(){this.disconnect()}static init(that,node){connect(node,that);let freqByte=new Uint8Array(that.frequencyBinCount),freqFloat=new Float32Array(that.frequencyBinCount),timeByte=new Uint8Array(that.fftSize),timeFloat=new Float32Array(that.fftSize);that.frequencyByte$=(0,cjs.interval)(0,cjs.animationFrameScheduler).pipe((0,operators.UI)(()=>(freqByte.length!==that.frequencyBinCount&&(freqByte=new Uint8Array(that.frequencyBinCount)),that.getByteFrequencyData(freqByte),freqByte)),(0,operators.BN)()),that.frequencyFloat$=(0,cjs.interval)(0,cjs.animationFrameScheduler).pipe((0,operators.UI)(()=>(freqFloat.length!==that.frequencyBinCount&&(freqFloat=new Float32Array(that.frequencyBinCount)),that.getFloatFrequencyData(freqFloat),freqFloat)),(0,operators.BN)()),that.timeByte$=(0,cjs.interval)(0,cjs.animationFrameScheduler).pipe((0,operators.UI)(()=>(timeByte.length!==that.fftSize&&(timeByte=new Uint8Array(that.frequencyBinCount)),that.getByteTimeDomainData(timeByte),timeByte)),(0,operators.BN)()),that.timeFloat$=(0,cjs.interval)(0,cjs.animationFrameScheduler).pipe((0,operators.UI)(()=>(timeFloat.length!==that.fftSize&&(timeFloat=new Float32Array(that.frequencyBinCount)),that.getFloatTimeDomainData(timeFloat),timeFloat)),(0,operators.BN)())}}__name(WebAudioAnalyser,"WebAudioAnalyser"),WebAudioAnalyser.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioAnalyser,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT},{token:"fftSize",attribute:!0},{token:"maxDecibels",attribute:!0},{token:"minDecibels",attribute:!0},{token:"smoothingTimeConstant",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioAnalyser.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioAnalyser,selector:"[waAnalyserNode]",inputs:{fftSize:"fftSize",minDecibels:"minDecibels",maxDecibels:"maxDecibels",smoothingTimeConstant:"smoothingTimeConstant",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},outputs:{frequencyByte$:"frequencyByte$",frequencyFloat$:"frequencyFloat$",timeByte$:"timeByte$",timeFloat$:"timeFloat$"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioAnalyser)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioAnalyser,decorators:[{type:core.Directive,args:[{selector:"[waAnalyserNode]",exportAs:"AudioNode",inputs:["fftSize","minDecibels","maxDecibels","smoothingTimeConstant","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioAnalyser)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["fftSize"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["maxDecibels"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["minDecibels"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["smoothingTimeConstant"]}]}]},propDecorators:{frequencyByte$:[{type:core.Output}],frequencyFloat$:[{type:core.Output}],timeByte$:[{type:core.Output}],timeFloat$:[{type:core.Output}]}});class WebAudioOutput extends GainNode{constructor(context,node,modern){if(!modern){const result=context.createGain();return Object.setPrototypeOf(result,WebAudioOutput.prototype),connect(node,result),result}super(context),connect(node,this)}set waOutput(destination){this.disconnect(),connect(this,destination)}ngOnDestroy(){this.disconnect()}static init(that,node){connect(node,that)}}__name(WebAudioOutput,"WebAudioOutput"),WebAudioOutput.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioOutput,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioOutput.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioOutput,selector:"[waOutput]",inputs:{waOutput:"waOutput"},usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioOutput,decorators:[{type:core.Directive,args:[{selector:"[waOutput]"}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{waOutput:[{type:core.Input}]}});class WebAudioMediaSource extends MediaElementAudioSourceNode{constructor(context,modern,{nativeElement}){if(!modern){const result=context.createMediaElementSource(nativeElement);return Object.setPrototypeOf(result,WebAudioMediaSource.prototype),result}super(context,{mediaElement:nativeElement})}ngOnDestroy(){this.disconnect()}}__name(WebAudioMediaSource,"WebAudioMediaSource"),WebAudioMediaSource.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaSource,deps:[{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT},{token:core.ElementRef}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioMediaSource.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioMediaSource,selector:"audio[waMediaElementAudioSourceNode], video[waMediaElementAudioSourceNode]",providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioMediaSource)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaSource,decorators:[{type:core.Directive,args:[{selector:"audio[waMediaElementAudioSourceNode], video[waMediaElementAudioSourceNode]",exportAs:"AudioNode",providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioMediaSource)}]}]}],ctorParameters:function(){return[{type:AudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:core.ElementRef,decorators:[{type:core.Inject,args:[core.ElementRef]}]}]}});class WebAudioOscillator extends OscillatorNode{constructor(context,modern,autoplay,detuneArg,frequencyArg){const detune=parse(detuneArg,0),frequency=parse(frequencyArg,440);if(!modern){const result=context.createOscillator();return Object.setPrototypeOf(WebAudioOscillator.prototype,Object.getPrototypeOf(result)),Object.setPrototypeOf(result,WebAudioOscillator.prototype),result.detune.value=detune,result.frequency.value=frequency,WebAudioOscillator.init(result,null,autoplay),result}super(context,{detune,frequency}),WebAudioOscillator.init(this,null,autoplay)}set periodicWave(periodicWave){this.setPeriodicWave(periodicWave)}ngOnDestroy(){try{this.stop()}catch(_a){}this.disconnect()}static init(that,node,autoplay){connect(node,that),null!==autoplay&&that.start();const ended=new core.EventEmitter;that.ended=ended,that.onended=()=>ended.emit()}}__name(WebAudioOscillator,"WebAudioOscillator"),WebAudioOscillator.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioOscillator,deps:[{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT},{token:"autoplay",attribute:!0},{token:"detune",attribute:!0},{token:"frequency",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioOscillator.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioOscillator,selector:"[waOscillatorNode]",inputs:{type:"type",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",periodicWave:"periodicWave",detuneParam:["detune","detuneParam"],frequencyParam:["frequency","frequencyParam"]},outputs:{ended:"ended"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioOscillator)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("detune")],WebAudioOscillator.prototype,"detuneParam",void 0),(0,tslib_es6.gn)([audioParam("frequency")],WebAudioOscillator.prototype,"frequencyParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioOscillator,decorators:[{type:core.Directive,args:[{selector:"[waOscillatorNode]",exportAs:"AudioNode",inputs:["type","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioOscillator)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["autoplay"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["detune"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["frequency"]}]}]},propDecorators:{periodicWave:[{type:core.Input}],detuneParam:[{type:core.Input,args:["detune"]}],frequencyParam:[{type:core.Input,args:["frequency"]}],ended:[{type:core.Output}]}});class WebAudioDestination extends AnalyserNode{constructor(context,node,modern){if(!modern){const result=context.createAnalyser();return Object.setPrototypeOf(result,WebAudioDestination.prototype),WebAudioDestination.init(result,node),result}super(context),WebAudioDestination.init(this,node)}ngOnDestroy(){this.disconnect()}isSilent(array){return Math.abs(array.reduce((acc,cur)=>acc+cur,0))<.001}static init(that,node){connect(node,that),that.fftSize=256,that.connect(that.context.destination),that.quiet=(0,cjs.interval)(100).pipe((0,operators.hZ)(new Float32Array(that.fftSize)),(0,operators.bw)(array=>that.getFloatTimeDomainData(array)),(0,operators.UI)(array=>that.isSilent(array)),(0,operators.xb)(),(0,operators.nF)(isSilent=>isSilent),(0,operators.bh)(5e3),(0,operators.hX)(isSilent=>isSilent))}}__name(WebAudioDestination,"WebAudioDestination"),WebAudioDestination.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioDestination,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioDestination.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioDestination,selector:"[waAudioDestinationNode]",outputs:{quiet:"quiet"},exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioDestination,decorators:[{type:core.Directive,args:[{selector:"[waAudioDestinationNode]",exportAs:"AudioNode"}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{quiet:[{type:core.Output}]}});class WebAudioGain extends GainNode{constructor(context,node,modern,gainArg){const gain=parse(gainArg,1);if(!modern){const result=context.createGain();return Object.setPrototypeOf(result,WebAudioGain.prototype),connect(node,result),result.gain.value=gain,result}super(context,{gain}),connect(node,this)}ngOnDestroy(){this.disconnect()}}function fallbackAudioParam(value){if(!value)return 0;if("number"==typeof value)return value;if(value instanceof Array){const last=value[value.length-1].value;return"number"==typeof last?last:last[last.length-1]}return value.value instanceof Array?value.value[value.value.length-1]:value.value}__name(WebAudioGain,"WebAudioGain"),WebAudioGain.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioGain,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT},{token:"gain",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioGain.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioGain,selector:"[waGainNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",gainParam:["gain","gainParam"]},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioGain)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("gain")],WebAudioGain.prototype,"gainParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioGain,decorators:[{type:core.Directive,args:[{selector:"[waGainNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioGain)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["gain"]}]}]},propDecorators:{gainParam:[{type:core.Input,args:["gain"]}]}}),__name(fallbackAudioParam,"fallbackAudioParam");class WebAudioStereoPanner extends StereoPannerNode{constructor(context,node,panArg){const pan=parse(panArg,0);try{new StereoPannerNode(context)}catch(_a){const result=context.createPanner();return Object.setPrototypeOf(result,WebAudioStereoPanner.prototype),result.fallbackToPannerNode(fallbackAudioParam(pan)),connect(node,result),result}super(context,{pan}),connect(node,this)}set panParam(pan){"setPosition"in this?this.fallbackToPannerNode(fallbackAudioParam(pan)):processAudioParam(this.pan,pan,this.context.currentTime)}ngOnDestroy(){this.disconnect()}fallbackToPannerNode(pan){const xDeg=100*pan,zDeg=xDeg>0?270-xDeg:xDeg+90,x=Math.sin(xDeg*(Math.PI/180)),z=Math.sin(zDeg*(Math.PI/180));this.setPosition(x,0,z)}}__name(WebAudioStereoPanner,"WebAudioStereoPanner"),WebAudioStereoPanner.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioStereoPanner,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:"pan",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioStereoPanner.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioStereoPanner,selector:"[waStereoPannerNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",panParam:["pan","panParam"]},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioStereoPanner)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioStereoPanner,decorators:[{type:core.Directive,args:[{selector:"[waStereoPannerNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioStereoPanner)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Attribute,args:["pan"]}]}]},propDecorators:{panParam:[{type:core.Input,args:["pan"]}]}});class WebAudioDelay extends DelayNode{constructor(context,node,modern,delayTimeArg,maxDelayTimeArg){const delayTime=parse(delayTimeArg,0),maxDelayTime=parse(maxDelayTimeArg,1);if(!modern){const result=context.createDelay(maxDelayTime);return Object.setPrototypeOf(result,WebAudioDelay.prototype),connect(node,result),result.delayTime.value=delayTime,result}super(context,{delayTime,maxDelayTime}),connect(node,this)}ngOnDestroy(){this.disconnect()}static init(that,node){connect(node,that)}}__name(WebAudioDelay,"WebAudioDelay"),WebAudioDelay.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioDelay,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT},{token:"delayTime",attribute:!0},{token:"maxDelayTime",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioDelay.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioDelay,selector:"[waDelayNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",delayTimeParam:["delayTime","delayTimeParam"]},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioDelay)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("delayTime")],WebAudioDelay.prototype,"delayTimeParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioDelay,decorators:[{type:core.Directive,args:[{selector:"[waDelayNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioDelay)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["delayTime"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["maxDelayTime"]}]}]},propDecorators:{delayTimeParam:[{type:core.Input,args:["delayTime"]}]}});class WebAudioBiquadFilter extends BiquadFilterNode{constructor(context,modern,node,detuneArg,frequencyArg,gainArg,QArg){const detune=parse(detuneArg,0),frequency=parse(frequencyArg,350),gain=parse(gainArg,0),Q=parse(QArg,1);if(!modern){const result=context.createBiquadFilter();return Object.setPrototypeOf(result,WebAudioBiquadFilter.prototype),result.detune.value=detune,result.frequency.value=frequency,result.gain.value=gain,result.Q.value=Q,connect(node,result),result}super(context,{detune,frequency,gain,Q}),connect(node,this)}ngOnDestroy(){this.disconnect()}static init(that,node){connect(node,that)}}__name(WebAudioBiquadFilter,"WebAudioBiquadFilter"),WebAudioBiquadFilter.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioBiquadFilter,deps:[{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT},{token:AUDIO_NODE,skipSelf:!0},{token:"detune",attribute:!0},{token:"frequency",attribute:!0},{token:"gain",attribute:!0},{token:"Q",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioBiquadFilter.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioBiquadFilter,selector:"[waBiquadFilterNode]",inputs:{type:"type",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",detuneParam:["detune","detuneParam"],frequencyParam:["frequency","frequencyParam"],gainParam:["gain","gainParam"],qParam:["Q","qParam"]},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioBiquadFilter)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("detune")],WebAudioBiquadFilter.prototype,"detuneParam",void 0),(0,tslib_es6.gn)([audioParam("frequency")],WebAudioBiquadFilter.prototype,"frequencyParam",void 0),(0,tslib_es6.gn)([audioParam("gain")],WebAudioBiquadFilter.prototype,"gainParam",void 0),(0,tslib_es6.gn)([audioParam("Q")],WebAudioBiquadFilter.prototype,"qParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioBiquadFilter,decorators:[{type:core.Directive,args:[{selector:"[waBiquadFilterNode]",exportAs:"AudioNode",inputs:["type","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioBiquadFilter)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Attribute,args:["detune"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["frequency"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["gain"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["Q"]}]}]},propDecorators:{detuneParam:[{type:core.Input,args:["detune"]}],frequencyParam:[{type:core.Input,args:["frequency"]}],gainParam:[{type:core.Input,args:["gain"]}],qParam:[{type:core.Input,args:["Q"]}]}});class WebAudioWaveShaper extends WaveShaperNode{constructor(context,node,modern){if(!modern){const result=context.createWaveShaper();return Object.setPrototypeOf(result,WebAudioWaveShaper.prototype),connect(node,result),result}super(context),connect(node,this)}ngOnDestroy(){this.disconnect()}}__name(WebAudioWaveShaper,"WebAudioWaveShaper"),WebAudioWaveShaper.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioWaveShaper,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioWaveShaper.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioWaveShaper,selector:"[waWaveShaperNode]",inputs:{oversample:"oversample",curve:"curve",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioWaveShaper)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioWaveShaper,decorators:[{type:core.Directive,args:[{selector:"[waWaveShaperNode]",exportAs:"AudioNode",inputs:["oversample","curve","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioWaveShaper)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]}});class WebAudioConvolver extends ConvolverNode{constructor(audioBufferService,context,node,modern){if(!modern){const result=context.createConvolver();return Object.setPrototypeOf(result,WebAudioConvolver.prototype),WebAudioConvolver.init(result,node,audioBufferService),result}super(context),WebAudioConvolver.init(this,node,audioBufferService)}set bufferSetter(source){this.buffer$.next(source)}ngOnDestroy(){this.buffer$.complete(),this.disconnect()}static init(that,node,audioBufferService){connect(node,that),that.buffer$=new cjs.Subject,that.buffer$.pipe((0,operators.wt)(source=>"string"==typeof source?audioBufferService.fetch(source):(0,cjs.of)(source))).subscribe(buffer=>{that.buffer=buffer})}}__name(WebAudioConvolver,"WebAudioConvolver"),WebAudioConvolver.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioConvolver,deps:[{token:AudioBufferService},{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioConvolver.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioConvolver,selector:"[waConvolverNode]",inputs:{normalize:"normalize",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",bufferSetter:["buffer","bufferSetter"]},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioConvolver)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioConvolver,decorators:[{type:core.Directive,args:[{selector:"[waConvolverNode]",exportAs:"AudioNode",inputs:["normalize","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioConvolver)}]}]}],ctorParameters:function(){return[{type:AudioBufferService,decorators:[{type:core.Inject,args:[AudioBufferService]}]},{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{bufferSetter:[{type:core.Input,args:["buffer"]}]}});class WebAudioPeriodicWavePipe{constructor(context){this.context=context}transform(real,imag,disableNormalization){return this.context.createPeriodicWave(new Float32Array(real),imag?new Float32Array(imag):new Float32Array(real.length),{disableNormalization:!!disableNormalization})}}__name(WebAudioPeriodicWavePipe,"WebAudioPeriodicWavePipe"),WebAudioPeriodicWavePipe.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioPeriodicWavePipe,deps:[{token:AUDIO_CONTEXT}],target:core.\u0275\u0275FactoryTarget.Pipe}),WebAudioPeriodicWavePipe.\u0275pipe=core.\u0275\u0275ngDeclarePipe({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioPeriodicWavePipe,name:"waPeriodicWave"}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioPeriodicWavePipe,decorators:[{type:core.Pipe,args:[{name:"waPeriodicWave"}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]}]}});class WebAudioParamPipe{transform(value,duration,mode="exponential"){return value instanceof Array?{value,duration}:{value,duration,mode}}}__name(WebAudioParamPipe,"WebAudioParamPipe"),WebAudioParamPipe.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioParamPipe,deps:[],target:core.\u0275\u0275FactoryTarget.Pipe}),WebAudioParamPipe.\u0275pipe=core.\u0275\u0275ngDeclarePipe({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioParamPipe,name:"waAudioParam"}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioParamPipe,decorators:[{type:core.Pipe,args:[{name:"waAudioParam"}]}]});class AudioPageComponent{constructor(context){this.context=context,this.buffers=[Date.now()],this.selectedChain="dry",this.selectedSource="buffer",this.gain=1,this.pan=0,this.delayTime=1,this.delayGain=.5,this.distortion=20,this.frequency=350,this.detune=0,this.filterGain=0,this.Q=1,this.type="lowpass",this.curve=makeDistortionCurve(this.distortion),this.started=!1,this.real=[0,0,1,0,1]}get distortionCompensation(){return 1.2-this.distortion/20}start(){this.started=!0,this.context.resume()}onCurveChange(distortion){this.distortion=distortion,this.curve=makeDistortionCurve(distortion)}onClick(source,button){"Play"===button.textContent.trim()?(button.textContent="Stop",source.start()):this.buffers[0]=Date.now()}onTimeDomain(array,canvas){const canvasCtx=canvas.getContext("2d");if(!canvasCtx)return;canvasCtx.fillStyle="rgb(200, 200, 200)",canvasCtx.fillRect(0,0,canvas.width,canvas.height),canvasCtx.lineWidth=2,canvasCtx.strokeStyle="rgb(0, 0, 0)",canvasCtx.beginPath();const sliceWidth=Number(canvas.width)/array.length;let x=0;for(let i=0;i<array.length;i++){const y=array[i]/128*canvas.height/2;0===i?canvasCtx.moveTo(x,y):canvasCtx.lineTo(x,y),x+=sliceWidth}canvasCtx.lineTo(canvas.width,canvas.height/2),canvasCtx.stroke()}}function makeDistortionCurve(amount){const curve=new Float32Array(44100),deg=Math.PI/180;for(let i=0;i<44100;++i){const x=2*i/44100-1;curve[i]=(3+amount)*x*20*deg/(Math.PI+amount*Math.abs(x))}return curve}__name(AudioPageComponent,"AudioPageComponent"),AudioPageComponent.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioPageComponent,deps:[{token:AUDIO_CONTEXT}],target:core.\u0275\u0275FactoryTarget.Component}),AudioPageComponent.\u0275cmp=core.\u0275\u0275ngDeclareComponent({minVersion:"12.0.0",version:"12.2.15",type:AudioPageComponent,selector:"audio-page",viewQueries:[{propertyName:"chain",first:!0,predicate:["chain"],descendants:!0}],ngImport:core,template:'<button *ngIf="!started; else graph" (click)="start()">\n    Start AudioContext\n</button>\n<ng-template #graph>\n    <section>\n        <h1>Description</h1>\n        <p>\n            This is a demo for\n            <code><em>@ng-web-apis/audio</em></code>\n            \u2014 a Web Audio API declarative library for Angular. Here you can\n            select different audio source options and see AudioNode graph for\n            selected configuration. Demo page uses HTML elements as directives\n            hosts, in real life scenario you can use\n            <code>ng-container</code>\n            so you will not have redundant DOM tags.\n        </p>\n    </section>\n    <section>\n        <h1>Source</h1>\n\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    value="buffer"\n                    name="source"\n                    [(ngModel)]="selectedSource"\n                />\n                AudioBufferSourceNode\n            </label>\n        </p>\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    value="media"\n                    name="source"\n                    [(ngModel)]="selectedSource"\n                />\n                MediaElementAudioSourceNode\n            </label>\n        </p>\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    value="oscillator"\n                    name="source"\n                    [(ngModel)]="selectedSource"\n                />\n                OscillatorNode\n            </label>\n        </p>\n\n        <ng-container [ngSwitch]="selectedSource">\n            <ng-container *ngSwitchCase="\'buffer\'">\n                <button\n                    *ngFor="let _ of buffers"\n                    #source="AudioNode"\n                    waAudioBufferSourceNode\n                    buffer="assets/demo.mp3"\n                    [loop]="true"\n                    (click)="onClick(source, $any($event).target)"\n                >\n                    Play\n                    <ng-container\n                        waAnalyserNode\n                        (timeByte$)="onTimeDomain($event, canvas)"\n                    >\n                        <ng-container\n                            [waOutput]="chain || fallback"\n                        ></ng-container>\n                    </ng-container>\n                </button>\n            </ng-container>\n            <audio\n                *ngSwitchCase="\'media\'"\n                waMediaElementAudioSourceNode\n                src="assets/demo.mp3"\n                loop\n                controls\n            >\n                <ng-container\n                    waAnalyserNode\n                    (timeByte$)="onTimeDomain($event, canvas)"\n                >\n                    <ng-container [waOutput]="chain || fallback"></ng-container>\n                </ng-container>\n            </audio>\n            <ng-container *ngSwitchCase="\'oscillator\'">\n                <button\n                    *ngFor="let _ of buffers"\n                    #source="AudioNode"\n                    waOscillatorNode\n                    [frequency]="100"\n                    [periodicWave]="real | waPeriodicWave"\n                    (click)="onClick(source, $any($event).target)"\n                >\n                    Play\n                    <ng-container\n                        waAnalyserNode\n                        (timeByte$)="onTimeDomain($event, canvas)"\n                    >\n                        <ng-container\n                            [waOutput]="chain || fallback"\n                        ></ng-container>\n                    </ng-container>\n                </button>\n            </ng-container>\n        </ng-container>\n\n        <p>\n            <canvas\n                #fallback="AudioNode"\n                #canvas\n                waAudioDestinationNode\n            ></canvas>\n        </p>\n    </section>\n\n    <section>\n        <h1>Chain</h1>\n\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    name="chain"\n                    value="dry"\n                    [(ngModel)]="selectedChain"\n                />\n                Dry\n            </label>\n        </p>\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    name="chain"\n                    value="balance"\n                    [(ngModel)]="selectedChain"\n                />\n                Balance\n            </label>\n        </p>\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    name="chain"\n                    value="delay"\n                    [(ngModel)]="selectedChain"\n                />\n                Delay\n            </label>\n        </p>\n        <p>\n            <label>\n                <input\n                    type="radio"\n                    name="chain"\n                    value="complex"\n                    [(ngModel)]="selectedChain"\n                />\n                Complex\n            </label>\n        </p>\n\n        <ng-container [ngSwitch]="selectedChain">\n            <ng-container *ngSwitchCase="\'balance\'">\n                <fieldset\n                    #chain="AudioNode"\n                    waGainNode\n                    [gain]="gain | waAudioParam: 0.1"\n                >\n                    <legend>GainNode</legend>\n                    <input\n                        type="range"\n                        min="0"\n                        max="1"\n                        step="0.01"\n                        [(ngModel)]="gain"\n                    />\n                    <fieldset\n                        waStereoPannerNode\n                        [pan]="pan | waAudioParam: 0.1"\n                    >\n                        <legend>StereoPannerNode</legend>\n                        <input\n                            type="range"\n                            min="-1"\n                            max="1"\n                            step="0.01"\n                            [(ngModel)]="pan"\n                        />\n                        <fieldset waAudioDestinationNode>\n                            <legend>AudioDestinationNode</legend>\n                        </fieldset>\n                    </fieldset>\n                </fieldset>\n            </ng-container>\n\n            <ng-container *ngSwitchCase="\'delay\'">\n                <fieldset\n                    #chain="AudioNode"\n                    waGainNode\n                    [gain]="gain | waAudioParam: 0.1"\n                >\n                    <legend>GainNode</legend>\n                    <em>For feedback loop purposes only</em>\n\n                    <fieldset\n                        waDelayNode\n                        [delayTime]="delayTime | waAudioParam: 0.1"\n                    >\n                        <legend>DelayNode</legend>\n                        <input\n                            type="range"\n                            min="0"\n                            max="1"\n                            step="0.01"\n                            [(ngModel)]="delayTime"\n                        />\n                        <fieldset waGainNode [gain]="delayGain">\n                            <legend>GainNode</legend>\n                            <input\n                                type="range"\n                                min="0"\n                                max="1"\n                                step="0.01"\n                                [(ngModel)]="delayGain"\n                            />\n                            <fieldset [waOutput]="chain">\n                                <legend>Output</legend>\n                                <em>\n                                    Connected back to the beginning of the chain\n                                </em>\n                            </fieldset>\n                        </fieldset>\n                    </fieldset>\n                    <fieldset waAudioDestinationNode>\n                        <legend>AudioDestinationNode</legend>\n                    </fieldset>\n                </fieldset>\n            </ng-container>\n\n            <ng-container *ngSwitchCase="\'complex\'">\n                <fieldset\n                    #chain="AudioNode"\n                    waBiquadFilterNode\n                    [type]="type"\n                    [gain]="filterGain | waAudioParam: 0.1"\n                    [frequency]="frequency | waAudioParam: 0.1"\n                    [Q]="Q | waAudioParam: 0.1"\n                    [detune]="detune | waAudioParam: 0.1"\n                >\n                    <legend>BiquadFilterNode</legend>\n                    <label>\n                        <select [(ngModel)]="type">\n                            <option value="lowpass">lowpass</option>\n                            <option value="highpass">highpass</option>\n                            <option value="bandpass">bandpass</option>\n                            <option value="lowshelf">lowshelf</option>\n                            <option value="highshelf">highshelf</option>\n                            <option value="peaking">peaking</option>\n                            <option value="notch">notch</option>\n                            <option value="allpass">allpass</option>\n                        </select>\n                        <code>type</code>\n                    </label>\n                    <label>\n                        <input\n                            type="range"\n                            min="0"\n                            max="1"\n                            step="0.01"\n                            [(ngModel)]="filterGain"\n                        />\n                        <code>gain</code>\n                    </label>\n                    <label>\n                        <input\n                            type="range"\n                            min="20"\n                            max="5000"\n                            [(ngModel)]="frequency"\n                        />\n                        <code>frequency</code>\n                    </label>\n                    <label>\n                        <input type="range" min="1" max="100" [(ngModel)]="Q" />\n                        <code>Q</code>\n                    </label>\n                    <label>\n                        <input\n                            type="range"\n                            min="0"\n                            max="100"\n                            [(ngModel)]="detune"\n                        />\n                        <code>detune</code>\n                    </label>\n                    <fieldset waWaveShaperNode oversample="4x" [curve]="curve">\n                        <legend>WaveShaperNode</legend>\n                        <input\n                            type="range"\n                            min="0"\n                            max="20"\n                            step="0.1"\n                            [ngModel]="distortion"\n                            (ngModelChange)="onCurveChange($event)"\n                        />\n                        <ng-container\n                            waGainNode\n                            [gain]="distortionCompensation | waAudioParam: 0.1"\n                        >\n                            <fieldset\n                                waConvolverNode\n                                buffer="assets/response.m4a"\n                            >\n                                <legend>ConvolverNode</legend>\n                                <fieldset waAudioDestinationNode>\n                                    <legend>AudioDestinationNode</legend>\n                                </fieldset>\n                            </fieldset>\n                        </ng-container>\n                    </fieldset>\n                </fieldset>\n            </ng-container>\n        </ng-container>\n    </section>\n</ng-template>\n',directives:[{type:common.O5,selector:"[ngIf]",inputs:["ngIf","ngIfThen","ngIfElse"]},{type:fesm2015_forms._,selector:"input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",inputs:["name","formControlName","value"]},{type:fesm2015_forms.Fj,selector:"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]"},{type:fesm2015_forms.JJ,selector:"[formControlName],[ngModel],[formControl]"},{type:fesm2015_forms.On,selector:"[ngModel]:not([formControlName]):not([formControl])",inputs:["name","disabled","ngModel","ngModelOptions"],outputs:["ngModelChange"],exportAs:["ngModel"]},{type:common.RF,selector:"[ngSwitch]",inputs:["ngSwitch"]},{type:common.n9,selector:"[ngSwitchCase]",inputs:["ngSwitchCase"]},{type:common.sg,selector:"[ngFor][ngForOf]",inputs:["ngForOf","ngForTrackBy","ngForTemplate"]},{type:WebAudioBufferSource,selector:"[waAudioBufferSourceNode]",inputs:["loop","loopStart","loopEnd","channelCount","channelCountMode","channelInterpretation","buffer","detune","playbackRate"],outputs:["ended"],exportAs:["AudioNode"]},{type:WebAudioAnalyser,selector:"[waAnalyserNode]",inputs:["fftSize","minDecibels","maxDecibels","smoothingTimeConstant","channelCount","channelCountMode","channelInterpretation"],outputs:["frequencyByte$","frequencyFloat$","timeByte$","timeFloat$"],exportAs:["AudioNode"]},{type:WebAudioOutput,selector:"[waOutput]",inputs:["waOutput"]},{type:WebAudioMediaSource,selector:"audio[waMediaElementAudioSourceNode], video[waMediaElementAudioSourceNode]",exportAs:["AudioNode"]},{type:WebAudioOscillator,selector:"[waOscillatorNode]",inputs:["type","channelCount","channelCountMode","channelInterpretation","periodicWave","detune","frequency"],outputs:["ended"],exportAs:["AudioNode"]},{type:WebAudioDestination,selector:"[waAudioDestinationNode]",outputs:["quiet"],exportAs:["AudioNode"]},{type:WebAudioGain,selector:"[waGainNode]",inputs:["channelCount","channelCountMode","channelInterpretation","gain"],exportAs:["AudioNode"]},{type:fesm2015_forms.eT,selector:"input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]"},{type:WebAudioStereoPanner,selector:"[waStereoPannerNode]",inputs:["channelCount","channelCountMode","channelInterpretation","pan"],exportAs:["AudioNode"]},{type:WebAudioDelay,selector:"[waDelayNode]",inputs:["channelCount","channelCountMode","channelInterpretation","delayTime"],exportAs:["AudioNode"]},{type:WebAudioBiquadFilter,selector:"[waBiquadFilterNode]",inputs:["type","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","Q"],exportAs:["AudioNode"]},{type:fesm2015_forms.EJ,selector:"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",inputs:["compareWith"]},{type:fesm2015_forms.YN,selector:"option",inputs:["ngValue","value"]},{type:fesm2015_forms.Kr,selector:"option",inputs:["ngValue","value"]},{type:WebAudioWaveShaper,selector:"[waWaveShaperNode]",inputs:["oversample","curve","channelCount","channelCountMode","channelInterpretation"],exportAs:["AudioNode"]},{type:WebAudioConvolver,selector:"[waConvolverNode]",inputs:["normalize","channelCount","channelCountMode","channelInterpretation","buffer"],exportAs:["AudioNode"]}],pipes:{waPeriodicWave:WebAudioPeriodicWavePipe,waAudioParam:WebAudioParamPipe},changeDetection:core.ChangeDetectionStrategy.OnPush}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioPageComponent,decorators:[{type:core.Component,args:[{selector:"audio-page",templateUrl:"./audio-page.component.html",changeDetection:core.ChangeDetectionStrategy.OnPush}]}],ctorParameters:function(){return[{type:AudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]}]},propDecorators:{chain:[{type:core.ViewChild,args:["chain"]}]}}),__name(makeDistortionCurve,"makeDistortionCurve");var router=__webpack_require__(3984);function latencyHintFactory(latencyHint){return null===latencyHint?void 0:Number.parseFloat(latencyHint)||latencyHint}__name(latencyHintFactory,"latencyHintFactory");class WebAudioContext extends AudioContext{constructor(latencyHint,sampleRate){super({latencyHint:latencyHintFactory(latencyHint),sampleRate:parseInt(sampleRate||"",10)||void 0})}ngOnDestroy(){this.close()}}__name(WebAudioContext,"WebAudioContext"),WebAudioContext.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioContext,deps:[{token:"latencyHint",attribute:!0},{token:"sampleRate",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioContext.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioContext,selector:"[waAudioContext]",providers:[{provide:AUDIO_CONTEXT,useExisting:(0,core.forwardRef)(()=>WebAudioContext)}],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioContext,decorators:[{type:core.Directive,args:[{selector:"[waAudioContext]",providers:[{provide:AUDIO_CONTEXT,useExisting:(0,core.forwardRef)(()=>WebAudioContext)}]}]}],ctorParameters:function(){return[{type:void 0,decorators:[{type:core.Attribute,args:["latencyHint"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["sampleRate"]}]}]}});class WebAudioChannel extends GainNode{constructor(context,modern){if(!modern){const result=context.createGain();return Object.setPrototypeOf(result,WebAudioChannel.prototype),result}super(context)}ngOnDestroy(){this.disconnect()}}__name(WebAudioChannel,"WebAudioChannel"),WebAudioChannel.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioChannel,deps:[{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioChannel.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioChannel,selector:"[waChannel]",exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioChannel,decorators:[{type:core.Directive,args:[{selector:"[waChannel]",exportAs:"AudioNode"}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]}});class WebAudioListener extends GainNode{constructor(context,modern){if(!modern){const result=context.createGain();return Object.setPrototypeOf(result,WebAudioListener.prototype),result}super(context)}get forwardX(){return this.context.listener.forwardX}get forwardY(){return this.context.listener.forwardY}get forwardZ(){return this.context.listener.forwardZ}get positionX(){return this.context.listener.positionX}get positionY(){return this.context.listener.positionY}get positionZ(){return this.context.listener.positionZ}get upX(){return this.context.listener.upX}get upY(){return this.context.listener.upY}get upZ(){return this.context.listener.upZ}ngOnChanges(){this.context.listener.positionX instanceof AudioParam||(this.context.listener.setOrientation(fallbackAudioParam(this.forwardXParam),fallbackAudioParam(this.forwardYParam),fallbackAudioParam(this.forwardZParam),fallbackAudioParam(this.upXParam),fallbackAudioParam(this.upYParam),fallbackAudioParam(this.upZParam)),this.context.listener.setPosition(fallbackAudioParam(this.positionXParam),fallbackAudioParam(this.positionYParam),fallbackAudioParam(this.positionZParam)))}}__name(WebAudioListener,"WebAudioListener"),WebAudioListener.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioListener,deps:[{token:AUDIO_CONTEXT,self:!0},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioListener.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioListener,selector:"[waAudioContext],[waOfflineAudioContext][length][sampleRate]",inputs:{forwardXParam:["forwardX","forwardXParam"],forwardYParam:["forwardY","forwardYParam"],forwardZParam:["forwardZ","forwardZParam"],positionXParam:["positionX","positionXParam"],positionYParam:["positionY","positionYParam"],positionZParam:["positionZ","positionZParam"],upXParam:["upX","upXParam"],upYParam:["upY","upYParam"],upZParam:["upZ","upZParam"]},usesInheritance:!0,usesOnChanges:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("forwardX")],WebAudioListener.prototype,"forwardXParam",void 0),(0,tslib_es6.gn)([audioParam("forwardY")],WebAudioListener.prototype,"forwardYParam",void 0),(0,tslib_es6.gn)([audioParam("forwardZ")],WebAudioListener.prototype,"forwardZParam",void 0),(0,tslib_es6.gn)([audioParam("positionX")],WebAudioListener.prototype,"positionXParam",void 0),(0,tslib_es6.gn)([audioParam("positionY")],WebAudioListener.prototype,"positionYParam",void 0),(0,tslib_es6.gn)([audioParam("positionZ")],WebAudioListener.prototype,"positionZParam",void 0),(0,tslib_es6.gn)([audioParam("upX")],WebAudioListener.prototype,"upXParam",void 0),(0,tslib_es6.gn)([audioParam("upY")],WebAudioListener.prototype,"upYParam",void 0),(0,tslib_es6.gn)([audioParam("upZ")],WebAudioListener.prototype,"upZParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioListener,decorators:[{type:core.Directive,args:[{selector:"[waAudioContext],[waOfflineAudioContext][length][sampleRate]"}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Self},{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{forwardXParam:[{type:core.Input,args:["forwardX"]}],forwardYParam:[{type:core.Input,args:["forwardY"]}],forwardZParam:[{type:core.Input,args:["forwardZ"]}],positionXParam:[{type:core.Input,args:["positionX"]}],positionYParam:[{type:core.Input,args:["positionY"]}],positionZParam:[{type:core.Input,args:["positionZ"]}],upXParam:[{type:core.Input,args:["upX"]}],upYParam:[{type:core.Input,args:["upY"]}],upZParam:[{type:core.Input,args:["upZ"]}]}});class WebAudioOfflineContext extends OfflineAudioContext{constructor(length,sampleRate,numberOfChannels,autoplay){super(parseInt(numberOfChannels||"",10)||1,parseInt(length,10),parseInt(sampleRate,10)),this.complete=new core.EventEmitter,this.oncomplete=({renderedBuffer})=>this.complete.emit(renderedBuffer),null!==autoplay&&this.startRendering()}}__name(WebAudioOfflineContext,"WebAudioOfflineContext"),WebAudioOfflineContext.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioOfflineContext,deps:[{token:"length",attribute:!0},{token:"sampleRate",attribute:!0},{token:"numberOfChannels",attribute:!0},{token:"autoplay",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioOfflineContext.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioOfflineContext,selector:"[waOfflineAudioContext][length][sampleRate]",outputs:{complete:"complete"},providers:[{provide:AUDIO_CONTEXT,useExisting:(0,core.forwardRef)(()=>WebAudioOfflineContext)}],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioOfflineContext,decorators:[{type:core.Directive,args:[{selector:"[waOfflineAudioContext][length][sampleRate]",providers:[{provide:AUDIO_CONTEXT,useExisting:(0,core.forwardRef)(()=>WebAudioOfflineContext)}]}]}],ctorParameters:function(){return[{type:void 0,decorators:[{type:core.Attribute,args:["length"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["sampleRate"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["numberOfChannels"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["autoplay"]}]}]},propDecorators:{complete:[{type:core.Output}]}});class WebAudioMediaStreamDestination extends MediaStreamAudioDestinationNode{constructor(context,node,modern){if(!modern){const result=context.createMediaStreamDestination();return Object.setPrototypeOf(result,WebAudioMediaStreamDestination.prototype),connect(node,result),result}super(context),connect(node,this)}}__name(WebAudioMediaStreamDestination,"WebAudioMediaStreamDestination"),WebAudioMediaStreamDestination.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaStreamDestination,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioMediaStreamDestination.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioMediaStreamDestination,selector:"[waMediaStreamAudioDestinationNode]",exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaStreamDestination,decorators:[{type:core.Directive,args:[{selector:"[waMediaStreamAudioDestinationNode]",exportAs:"AudioNode"}]}],ctorParameters:function(){return[{type:AudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]}});class WebAudioChannelMerger extends ChannelMergerNode{constructor(inputs,context,modern){const numberOfInputs=parseInt(inputs||"",10)||6;if(!modern){const result=context.createChannelMerger(numberOfInputs);return Object.setPrototypeOf(result,WebAudioChannelMerger.prototype),result}super(context,{numberOfInputs})}set channels(channels){channels.forEach((node,index)=>{node.connect(this,0,index)})}ngOnDestroy(){this.disconnect()}}__name(WebAudioChannelMerger,"WebAudioChannelMerger"),WebAudioChannelMerger.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioChannelMerger,deps:[{token:"numberOfInputs",attribute:!0},{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioChannelMerger.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioChannelMerger,selector:"[waChannelMergerNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioChannelMerger)}],queries:[{propertyName:"channels",predicate:WebAudioChannel}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioChannelMerger,decorators:[{type:core.Directive,args:[{selector:"[waChannelMergerNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioChannelMerger)}]}]}],ctorParameters:function(){return[{type:void 0,decorators:[{type:core.Attribute,args:["numberOfInputs"]}]},{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{channels:[{type:core.ContentChildren,args:[WebAudioChannel,{descendants:!1}]}]}});class WebAudioChannelSplitter extends ChannelSplitterNode{constructor(outputs,context,node,modern){const numberOfOutputs=parseInt(outputs||"",10)||6;if(!modern){const result=context.createChannelSplitter(numberOfOutputs);return Object.setPrototypeOf(result,WebAudioChannelSplitter.prototype),connect(node,result),result}super(context,{numberOfOutputs}),connect(node,this)}set channels(channels){this.disconnect(),channels.filter(node=>!!node).forEach((node,index)=>{this.connect(node,index)})}ngOnDestroy(){this.disconnect()}}__name(WebAudioChannelSplitter,"WebAudioChannelSplitter"),WebAudioChannelSplitter.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioChannelSplitter,deps:[{token:"numberOfOutputs",attribute:!0},{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioChannelSplitter.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioChannelSplitter,selector:"[waChannelSplitterNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},providers:[{provide:AUDIO_NODE,useValue:null}],queries:[{propertyName:"channels",predicate:AUDIO_NODE}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioChannelSplitter,decorators:[{type:core.Directive,args:[{selector:"[waChannelSplitterNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useValue:null}]}]}],ctorParameters:function(){return[{type:void 0,decorators:[{type:core.Attribute,args:["numberOfOutputs"]}]},{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{channels:[{type:core.ContentChildren,args:[AUDIO_NODE,{descendants:!1}]}]}});class WebAudioDynamicsCompressor extends DynamicsCompressorNode{constructor(context,node,modern,attackArg,kneeArg,ratioArg,releaseArg,thresholdArg){const attack=parse(attackArg,.003),knee=parse(kneeArg,30),ratio=parse(ratioArg,12),release=parse(releaseArg,.25),threshold=parse(thresholdArg,-24);if(!modern){const result=context.createDynamicsCompressor();return Object.setPrototypeOf(result,WebAudioDynamicsCompressor.prototype),connect(node,result),result.attack.value=attack,result.knee.value=knee,result.ratio.value=ratio,result.release.value=release,result.threshold.value=threshold,result}super(context,{attack,knee,ratio,release,threshold}),connect(node,this)}ngOnDestroy(){this.disconnect()}}__name(WebAudioDynamicsCompressor,"WebAudioDynamicsCompressor"),WebAudioDynamicsCompressor.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioDynamicsCompressor,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT},{token:"attack",attribute:!0},{token:"knee",attribute:!0},{token:"ratio",attribute:!0},{token:"release",attribute:!0},{token:"threshold",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioDynamicsCompressor.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioDynamicsCompressor,selector:"[waDynamicsCompressorNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",attackParam:["attack","attackParam"],kneeParam:["knee","kneeParam"],ratioParam:["ratio","ratioParam"],releaseParam:["release","releaseParam"],thresholdParam:["threshold","thresholdParam"]},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioDynamicsCompressor)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("attack")],WebAudioDynamicsCompressor.prototype,"attackParam",void 0),(0,tslib_es6.gn)([audioParam("knee")],WebAudioDynamicsCompressor.prototype,"kneeParam",void 0),(0,tslib_es6.gn)([audioParam("ratio")],WebAudioDynamicsCompressor.prototype,"ratioParam",void 0),(0,tslib_es6.gn)([audioParam("release")],WebAudioDynamicsCompressor.prototype,"releaseParam",void 0),(0,tslib_es6.gn)([audioParam("threshold")],WebAudioDynamicsCompressor.prototype,"thresholdParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioDynamicsCompressor,decorators:[{type:core.Directive,args:[{selector:"[waDynamicsCompressorNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioDynamicsCompressor)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["attack"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["knee"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["ratio"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["release"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["threshold"]}]}]},propDecorators:{attackParam:[{type:core.Input,args:["attack"]}],kneeParam:[{type:core.Input,args:["knee"]}],ratioParam:[{type:core.Input,args:["ratio"]}],releaseParam:[{type:core.Input,args:["release"]}],thresholdParam:[{type:core.Input,args:["threshold"]}]}});const FEEDBACK_COEFFICIENTS=new core.InjectionToken("A sequence of feedback coefficients for IIRFilterNode"),FEEDFORWARD_COEFFICIENTS=new core.InjectionToken("A sequence of feedforward coefficients for IIRFilterNode");class WebAudioIIRFilter extends IIRFilterNode{constructor(feedback,feedforward,context,modern,node){if(!modern){const result=context.createIIRFilter(feedback,feedforward);return Object.setPrototypeOf(result,WebAudioIIRFilter.prototype),connect(node,result),result}super(context,{feedback,feedforward}),connect(node,this)}ngOnDestroy(){this.disconnect()}}__name(WebAudioIIRFilter,"WebAudioIIRFilter"),WebAudioIIRFilter.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioIIRFilter,deps:[{token:FEEDBACK_COEFFICIENTS},{token:FEEDFORWARD_COEFFICIENTS},{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT},{token:AUDIO_NODE,skipSelf:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioIIRFilter.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioIIRFilter,selector:"[waIIRFilterNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioIIRFilter)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioIIRFilter,decorators:[{type:core.Directive,args:[{selector:"[waIIRFilterNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioIIRFilter)}]}]}],ctorParameters:function(){return[{type:void 0,decorators:[{type:core.Inject,args:[FEEDBACK_COEFFICIENTS]}]},{type:void 0,decorators:[{type:core.Inject,args:[FEEDFORWARD_COEFFICIENTS]}]},{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]}]}});class WebAudioPanner extends PannerNode{constructor(context,node,modern){if(!modern){const result=context.createPanner();return Object.setPrototypeOf(result,WebAudioPanner.prototype),connect(node,result),result}super(context),connect(node,this)}ngOnChanges(){this.positionX instanceof AudioParam||(this.setOrientation(fallbackAudioParam(this.orientationXParam),fallbackAudioParam(this.orientationYParam),fallbackAudioParam(this.orientationZParam)),this.setPosition(fallbackAudioParam(this.positionXParam),fallbackAudioParam(this.positionYParam),fallbackAudioParam(this.positionZParam)))}ngOnDestroy(){this.disconnect()}}__name(WebAudioPanner,"WebAudioPanner"),WebAudioPanner.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioPanner,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioPanner.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioPanner,selector:"[waPannerNode]",inputs:{coneInnerAngle:"coneInnerAngle",coneOuterAngle:"coneOuterAngle",coneOuterGain:"coneOuterGain",distanceModel:"distanceModel",maxDistance:"maxDistance",panningModel:"panningModel",refDistance:"refDistance",rolloffFactor:"rolloffFactor",channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",orientationXParam:"orientationXParam",orientationYParam:"orientationYParam",orientationZParam:"orientationZParam",positionXParam:"positionXParam",positionYParam:"positionYParam",positionZParam:"positionZParam"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioPanner)}],exportAs:["AudioNode"],usesInheritance:!0,usesOnChanges:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("orientationX")],WebAudioPanner.prototype,"orientationXParam",void 0),(0,tslib_es6.gn)([audioParam("orientationY")],WebAudioPanner.prototype,"orientationYParam",void 0),(0,tslib_es6.gn)([audioParam("orientationZ")],WebAudioPanner.prototype,"orientationZParam",void 0),(0,tslib_es6.gn)([audioParam("positionX")],WebAudioPanner.prototype,"positionXParam",void 0),(0,tslib_es6.gn)([audioParam("positionY")],WebAudioPanner.prototype,"positionYParam",void 0),(0,tslib_es6.gn)([audioParam("positionZ")],WebAudioPanner.prototype,"positionZParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioPanner,decorators:[{type:core.Directive,args:[{selector:"[waPannerNode]",exportAs:"AudioNode",inputs:["coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioPanner)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]},propDecorators:{orientationXParam:[{type:core.Input}],orientationYParam:[{type:core.Input}],orientationZParam:[{type:core.Input}],positionXParam:[{type:core.Input}],positionYParam:[{type:core.Input}],positionZParam:[{type:core.Input}]}});class WebAudioScriptProcessor extends ScriptProcessorNode{constructor(bufferSize,numberOfInputChannels,numberOfOutputChannels,context,node){try{const result=context.createScriptProcessor(parseInt(bufferSize||"",10)||0,parseInt(numberOfInputChannels||"",10)||2,parseInt(numberOfOutputChannels||"",10)||2);Object.setPrototypeOf(result,WebAudioScriptProcessor.prototype),connect(node,result);const audioprocess=new core.EventEmitter;return result.audioprocess=audioprocess,result.onaudioprocess=e=>audioprocess.emit(e),result}catch(_){}super()}ngOnDestroy(){this.disconnect()}}__name(WebAudioScriptProcessor,"WebAudioScriptProcessor"),WebAudioScriptProcessor.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioScriptProcessor,deps:[{token:"bufferSize",attribute:!0},{token:"numberOfInputChannels",attribute:!0},{token:"numberOfOutputChannels",attribute:!0},{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioScriptProcessor.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioScriptProcessor,selector:"[waScriptProcessorNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},outputs:{audioprocess:"audioprocess"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioScriptProcessor)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioScriptProcessor,decorators:[{type:core.Directive,args:[{selector:"[waScriptProcessorNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioScriptProcessor)}]}]}],ctorParameters:function(){return[{type:void 0,decorators:[{type:core.Attribute,args:["bufferSize"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["numberOfInputChannels"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["numberOfOutputChannels"]}]},{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]}]},propDecorators:{audioprocess:[{type:core.Output}]}});class WebAudioWorklet extends AudioWorkletNode{constructor(context,node,name){super(context,name),this.processorerror=new core.EventEmitter,this.onprocessorerror=()=>this.processorerror.emit(),connect(node,this)}ngOnDestroy(){this.disconnect()}}__name(WebAudioWorklet,"WebAudioWorklet"),WebAudioWorklet.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioWorklet,deps:[{token:AUDIO_CONTEXT},{token:AUDIO_NODE,skipSelf:!0},{token:"name",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioWorklet.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioWorklet,selector:"[waAudioWorkletNode][name]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation"},outputs:{processorerror:"processorerror"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioWorklet)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioWorklet,decorators:[{type:core.Directive,args:[{selector:"[waAudioWorkletNode][name]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioWorklet)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:AudioNode,decorators:[{type:core.SkipSelf},{type:core.Inject,args:[AUDIO_NODE]}]},{type:void 0,decorators:[{type:core.Attribute,args:["name"]}]}]},propDecorators:{processorerror:[{type:core.Output}]}});class WebAudioConstantSource extends ConstantSourceNode{constructor(context,autoplay,offset){super(context,{offset:parse(offset,0)}),this.ended=new core.EventEmitter,this.onended=()=>this.ended.emit(),null!==autoplay&&this.start()}ngOnDestroy(){try{this.stop()}catch(_a){}this.disconnect()}}__name(WebAudioConstantSource,"WebAudioConstantSource"),WebAudioConstantSource.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioConstantSource,deps:[{token:AUDIO_CONTEXT},{token:"autoplay",attribute:!0},{token:"offset",attribute:!0}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioConstantSource.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioConstantSource,selector:"[waConstantSourceNode]",inputs:{channelCount:"channelCount",channelCountMode:"channelCountMode",channelInterpretation:"channelInterpretation",offsetParam:["offset","offsetParam"]},outputs:{ended:"ended"},providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioConstantSource)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),(0,tslib_es6.gn)([audioParam("offset")],WebAudioConstantSource.prototype,"offsetParam",void 0),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioConstantSource,decorators:[{type:core.Directive,args:[{selector:"[waConstantSourceNode]",exportAs:"AudioNode",inputs:["channelCount","channelCountMode","channelInterpretation"],providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioConstantSource)}]}]}],ctorParameters:function(){return[{type:BaseAudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Attribute,args:["autoplay"]}]},{type:void 0,decorators:[{type:core.Attribute,args:["offset"]}]}]},propDecorators:{offsetParam:[{type:core.Input,args:["offset"]}],ended:[{type:core.Output}]}});const MEDIA_STREAM=new core.InjectionToken("MediaStream for MediaStreamAudioSourceNode");class WebAudioMediaStreamSource extends MediaStreamAudioSourceNode{constructor(mediaStream,context,modern){if(!modern){const result=context.createMediaStreamSource(mediaStream);return Object.setPrototypeOf(result,WebAudioMediaStreamSource.prototype),result}super(context,{mediaStream})}ngOnDestroy(){this.disconnect()}}__name(WebAudioMediaStreamSource,"WebAudioMediaStreamSource"),WebAudioMediaStreamSource.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaStreamSource,deps:[{token:MEDIA_STREAM},{token:AUDIO_CONTEXT},{token:CONSTRUCTOR_SUPPORT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioMediaStreamSource.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioMediaStreamSource,selector:"[waMediaStreamAudioSourceNode]",providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioMediaStreamSource)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaStreamSource,decorators:[{type:core.Directive,args:[{selector:"[waMediaStreamAudioSourceNode]",exportAs:"AudioNode",providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioMediaStreamSource)}]}]}],ctorParameters:function(){return[{type:MediaStream,decorators:[{type:core.Inject,args:[MEDIA_STREAM]}]},{type:AudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]},{type:void 0,decorators:[{type:core.Inject,args:[CONSTRUCTOR_SUPPORT]}]}]}});const MEDIA_STREAM_TRACK=new core.InjectionToken("MediaStreamTrack for MediaStreamTrackAudioSourceNode");class WebAudioMediaStreamTrackSource extends MediaStreamTrackAudioSourceNode{constructor(mediaStreamTrack,context){super(context,{mediaStreamTrack})}ngOnDestroy(){this.disconnect()}}__name(WebAudioMediaStreamTrackSource,"WebAudioMediaStreamTrackSource"),WebAudioMediaStreamTrackSource.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaStreamTrackSource,deps:[{token:MEDIA_STREAM_TRACK},{token:AUDIO_CONTEXT}],target:core.\u0275\u0275FactoryTarget.Directive}),WebAudioMediaStreamTrackSource.\u0275dir=core.\u0275\u0275ngDeclareDirective({minVersion:"12.0.0",version:"12.2.15",type:WebAudioMediaStreamTrackSource,selector:"[waMediaStreamTrackAudioSourceNode]",providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioMediaStreamTrackSource)}],exportAs:["AudioNode"],usesInheritance:!0,ngImport:core}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioMediaStreamTrackSource,decorators:[{type:core.Directive,args:[{selector:"[waMediaStreamTrackAudioSourceNode]",exportAs:"AudioNode",providers:[{provide:AUDIO_NODE,useExisting:(0,core.forwardRef)(()=>WebAudioMediaStreamTrackSource)}]}]}],ctorParameters:function(){return[{type:MediaStreamTrack,decorators:[{type:core.Inject,args:[MEDIA_STREAM_TRACK]}]},{type:AudioContext,decorators:[{type:core.Inject,args:[AUDIO_CONTEXT]}]}]}});class WebAudioModule{}__name(WebAudioModule,"WebAudioModule"),WebAudioModule.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioModule,deps:[],target:core.\u0275\u0275FactoryTarget.NgModule}),WebAudioModule.\u0275mod=core.\u0275\u0275ngDeclareNgModule({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioModule,declarations:[WebAudioContext,WebAudioChannel,WebAudioDestination,WebAudioListener,WebAudioOfflineContext,WebAudioOutput,WebAudioMediaStreamDestination,WebAudioBufferSource,WebAudioConstantSource,WebAudioMediaSource,WebAudioMediaStreamSource,WebAudioMediaStreamTrackSource,WebAudioOscillator,WebAudioAnalyser,WebAudioBiquadFilter,WebAudioChannelSplitter,WebAudioChannelMerger,WebAudioConvolver,WebAudioDelay,WebAudioDynamicsCompressor,WebAudioGain,WebAudioIIRFilter,WebAudioPanner,WebAudioScriptProcessor,WebAudioStereoPanner,WebAudioWaveShaper,WebAudioWorklet,WebAudioParamPipe,WebAudioPeriodicWavePipe],exports:[WebAudioContext,WebAudioChannel,WebAudioDestination,WebAudioListener,WebAudioOfflineContext,WebAudioOutput,WebAudioMediaStreamDestination,WebAudioBufferSource,WebAudioConstantSource,WebAudioMediaSource,WebAudioMediaStreamSource,WebAudioMediaStreamTrackSource,WebAudioOscillator,WebAudioAnalyser,WebAudioBiquadFilter,WebAudioChannelSplitter,WebAudioChannelMerger,WebAudioConvolver,WebAudioDelay,WebAudioDynamicsCompressor,WebAudioGain,WebAudioIIRFilter,WebAudioPanner,WebAudioScriptProcessor,WebAudioStereoPanner,WebAudioWaveShaper,WebAudioWorklet,WebAudioParamPipe,WebAudioPeriodicWavePipe]}),WebAudioModule.\u0275inj=core.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioModule}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:WebAudioModule,decorators:[{type:core.NgModule,args:[{declarations:[WebAudioContext,WebAudioChannel,WebAudioDestination,WebAudioListener,WebAudioOfflineContext,WebAudioOutput,WebAudioMediaStreamDestination,WebAudioBufferSource,WebAudioConstantSource,WebAudioMediaSource,WebAudioMediaStreamSource,WebAudioMediaStreamTrackSource,WebAudioOscillator,WebAudioAnalyser,WebAudioBiquadFilter,WebAudioChannelSplitter,WebAudioChannelMerger,WebAudioConvolver,WebAudioDelay,WebAudioDynamicsCompressor,WebAudioGain,WebAudioIIRFilter,WebAudioPanner,WebAudioScriptProcessor,WebAudioStereoPanner,WebAudioWaveShaper,WebAudioWorklet,WebAudioParamPipe,WebAudioPeriodicWavePipe],exports:[WebAudioContext,WebAudioChannel,WebAudioDestination,WebAudioListener,WebAudioOfflineContext,WebAudioOutput,WebAudioMediaStreamDestination,WebAudioBufferSource,WebAudioConstantSource,WebAudioMediaSource,WebAudioMediaStreamSource,WebAudioMediaStreamTrackSource,WebAudioOscillator,WebAudioAnalyser,WebAudioBiquadFilter,WebAudioChannelSplitter,WebAudioChannelMerger,WebAudioConvolver,WebAudioDelay,WebAudioDynamicsCompressor,WebAudioGain,WebAudioIIRFilter,WebAudioPanner,WebAudioScriptProcessor,WebAudioStereoPanner,WebAudioWaveShaper,WebAudioWorklet,WebAudioParamPipe,WebAudioPeriodicWavePipe]}]}]});class AudioPageModule{}__name(AudioPageModule,"AudioPageModule"),AudioPageModule.\u0275fac=core.\u0275\u0275ngDeclareFactory({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioPageModule,deps:[],target:core.\u0275\u0275FactoryTarget.NgModule}),AudioPageModule.\u0275mod=core.\u0275\u0275ngDeclareNgModule({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioPageModule,declarations:[AudioPageComponent],imports:[common.ez,fesm2015_forms.u5,WebAudioModule,router.Bz]}),AudioPageModule.\u0275inj=core.\u0275\u0275ngDeclareInjector({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioPageModule,imports:[[common.ez,fesm2015_forms.u5,WebAudioModule,router.Bz.forChild([{path:"",component:AudioPageComponent}])]]}),core.\u0275\u0275ngDeclareClassMetadata({minVersion:"12.0.0",version:"12.2.15",ngImport:core,type:AudioPageModule,decorators:[{type:core.NgModule,args:[{imports:[common.ez,fesm2015_forms.u5,WebAudioModule,router.Bz.forChild([{path:"",component:AudioPageComponent}])],declarations:[AudioPageComponent]}]}]})}};